/*
 * This source file forms part of DENGR, a piece of software which
 * produces disc images which produce visible images on the recording side when
 * burned to Compact Disc.
 *
 * Copyright (C) 2020 Joshua Saxby <joshua.a.saxby@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#include <utility>

#include <catch2/catch.hpp>

#include "Byte.hpp"
#include "ChannelByte.hpp"
#include "eight_to_fourteen.hpp"


using namespace com::saxbophone::dengr;
using namespace com::saxbophone::dengr::eight_to_fourteen;

SCENARIO("8-bit bytes can be converted to and from valid 14-bit EFM codewords") {
    GIVEN("An 8-bit byte and its corresponding 14-bit EFM codeword") {
        /*
         * NOTE: this table is used both for encoding and decoding tests
         * Its contents (but not the wrapping GENERATE() code!) are automatically
         * generated by the Python3 script build_efm_test_data_from_efm_table.py
         * which is in this directory.
         */
        auto valid_efm_code_pair = GENERATE(
            /* BEGIN AUTO-GENERATED CODE */
            std::pair<Byte, ChannelByte>{Byte{0b00000000}, ChannelByte{0b01001000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000000}, ChannelByte{0b01001000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000001}, ChannelByte{0b10000100000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000001}, ChannelByte{0b10000100100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000010}, ChannelByte{0b10010000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000010}, ChannelByte{0b10010000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000011}, ChannelByte{0b10001000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000011}, ChannelByte{0b10001000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000100}, ChannelByte{0b01000100000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000100}, ChannelByte{0b01000100100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000101}, ChannelByte{0b00000100010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000101}, ChannelByte{0b00000000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000110}, ChannelByte{0b00010000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000110}, ChannelByte{0b00010000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00000111}, ChannelByte{0b00100100000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01000111}, ChannelByte{0b00100100100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001000}, ChannelByte{0b01001001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001000}, ChannelByte{0b01001001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001001}, ChannelByte{0b10000001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001001}, ChannelByte{0b10000001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001010}, ChannelByte{0b10010001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001010}, ChannelByte{0b10010001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001011}, ChannelByte{0b10001001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001011}, ChannelByte{0b10001001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001100}, ChannelByte{0b01000001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001100}, ChannelByte{0b01000001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001101}, ChannelByte{0b00000001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001101}, ChannelByte{0b00000001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001110}, ChannelByte{0b00010001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001110}, ChannelByte{0b00010001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00001111}, ChannelByte{0b00100001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01001111}, ChannelByte{0b00100001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010000}, ChannelByte{0b10000000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010000}, ChannelByte{0b10000000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010001}, ChannelByte{0b10000010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010001}, ChannelByte{0b10000010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010010}, ChannelByte{0b10010010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010010}, ChannelByte{0b10010010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010011}, ChannelByte{0b00100000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010011}, ChannelByte{0b00100000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010100}, ChannelByte{0b01000010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010100}, ChannelByte{0b01000010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010101}, ChannelByte{0b00000010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010101}, ChannelByte{0b00000010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010110}, ChannelByte{0b00010010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010110}, ChannelByte{0b00010010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00010111}, ChannelByte{0b00100010000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01010111}, ChannelByte{0b00100010000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011000}, ChannelByte{0b01001000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011000}, ChannelByte{0b01001000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011001}, ChannelByte{0b10000000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011001}, ChannelByte{0b10000000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011010}, ChannelByte{0b10010000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011010}, ChannelByte{0b10010000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011011}, ChannelByte{0b10001000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011011}, ChannelByte{0b10001000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011100}, ChannelByte{0b01000000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011100}, ChannelByte{0b01000000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011101}, ChannelByte{0b00001000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011101}, ChannelByte{0b00001000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011110}, ChannelByte{0b00010000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011110}, ChannelByte{0b00010000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00011111}, ChannelByte{0b00100000010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01011111}, ChannelByte{0b00100000000100}},
            std::pair<Byte, ChannelByte>{Byte{0b00100000}, ChannelByte{0b00000000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100000}, ChannelByte{0b01001000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100001}, ChannelByte{0b10000100001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100001}, ChannelByte{0b10000100100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100010}, ChannelByte{0b00001000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100010}, ChannelByte{0b10010000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100011}, ChannelByte{0b00100100100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100011}, ChannelByte{0b10001000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100100}, ChannelByte{0b01000100001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100100}, ChannelByte{0b01000100100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100101}, ChannelByte{0b00000100001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100101}, ChannelByte{0b00000000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00100110}, ChannelByte{0b01000000100000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100110}, ChannelByte{0b01000000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b00100111}, ChannelByte{0b00100100001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01100111}, ChannelByte{0b00100100100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101000}, ChannelByte{0b01001001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101000}, ChannelByte{0b01001001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101001}, ChannelByte{0b10000001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101001}, ChannelByte{0b10000001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101010}, ChannelByte{0b10010001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101010}, ChannelByte{0b10010001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101011}, ChannelByte{0b10001001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101011}, ChannelByte{0b10001001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101100}, ChannelByte{0b01000001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101100}, ChannelByte{0b01000001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101101}, ChannelByte{0b00000001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101101}, ChannelByte{0b00000001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101110}, ChannelByte{0b00010001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101110}, ChannelByte{0b00010001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00101111}, ChannelByte{0b00100001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01101111}, ChannelByte{0b00100001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110000}, ChannelByte{0b00000100000000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110000}, ChannelByte{0b10000000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110001}, ChannelByte{0b10000010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110001}, ChannelByte{0b10000010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110010}, ChannelByte{0b10010010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110010}, ChannelByte{0b10010010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110011}, ChannelByte{0b10000100010000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110011}, ChannelByte{0b00100000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110100}, ChannelByte{0b01000010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110100}, ChannelByte{0b01000010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110101}, ChannelByte{0b00000010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110101}, ChannelByte{0b00000010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110110}, ChannelByte{0b00010010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110110}, ChannelByte{0b00010010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00110111}, ChannelByte{0b00100010001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01110111}, ChannelByte{0b00100010000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111000}, ChannelByte{0b01001000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111000}, ChannelByte{0b01001000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111001}, ChannelByte{0b10000000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111001}, ChannelByte{0b00001001001000}},
            std::pair<Byte, ChannelByte>{Byte{0b00111010}, ChannelByte{0b10010000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111010}, ChannelByte{0b10010000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111011}, ChannelByte{0b10001000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111011}, ChannelByte{0b10001000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111100}, ChannelByte{0b01000000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111100}, ChannelByte{0b01000000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111101}, ChannelByte{0b00001000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111101}, ChannelByte{0b00001000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111110}, ChannelByte{0b00010000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111110}, ChannelByte{0b00010000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b00111111}, ChannelByte{0b00100000001000}},
            std::pair<Byte, ChannelByte>{Byte{0b01111111}, ChannelByte{0b00100000000010}},
            std::pair<Byte, ChannelByte>{Byte{0b10000000}, ChannelByte{0b01001000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000000}, ChannelByte{0b01000100100000}},
            std::pair<Byte, ChannelByte>{Byte{0b10000001}, ChannelByte{0b10000100100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000001}, ChannelByte{0b10000100010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10000010}, ChannelByte{0b10010000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000010}, ChannelByte{0b10010010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b10000011}, ChannelByte{0b10001000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000011}, ChannelByte{0b00001000100100}},
            std::pair<Byte, ChannelByte>{Byte{0b10000100}, ChannelByte{0b01000100100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000100}, ChannelByte{0b01000100010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10000101}, ChannelByte{0b00000000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000101}, ChannelByte{0b00000100010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10000110}, ChannelByte{0b00010000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000110}, ChannelByte{0b00010010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b10000111}, ChannelByte{0b00100100100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11000111}, ChannelByte{0b00100100010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10001000}, ChannelByte{0b01001001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001000}, ChannelByte{0b00001001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b10001001}, ChannelByte{0b10000001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001001}, ChannelByte{0b10000100000001}},
            std::pair<Byte, ChannelByte>{Byte{0b10001010}, ChannelByte{0b10010001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001010}, ChannelByte{0b00001001000100}},
            std::pair<Byte, ChannelByte>{Byte{0b10001011}, ChannelByte{0b10001001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001011}, ChannelByte{0b00001001000000}},
            std::pair<Byte, ChannelByte>{Byte{0b10001100}, ChannelByte{0b01000001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001100}, ChannelByte{0b01000100000001}},
            std::pair<Byte, ChannelByte>{Byte{0b10001101}, ChannelByte{0b00000001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001101}, ChannelByte{0b00000100000001}},
            std::pair<Byte, ChannelByte>{Byte{0b10001110}, ChannelByte{0b00010001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001110}, ChannelByte{0b00000010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b10001111}, ChannelByte{0b00100001000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11001111}, ChannelByte{0b00100100000001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010000}, ChannelByte{0b10000000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010000}, ChannelByte{0b00000100100100}},
            std::pair<Byte, ChannelByte>{Byte{0b10010001}, ChannelByte{0b10000010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010001}, ChannelByte{0b10000010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010010}, ChannelByte{0b10010010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010010}, ChannelByte{0b10010010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010011}, ChannelByte{0b00100000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010011}, ChannelByte{0b10000100100000}},
            std::pair<Byte, ChannelByte>{Byte{0b10010100}, ChannelByte{0b01000010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010100}, ChannelByte{0b01000010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010101}, ChannelByte{0b00000010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010101}, ChannelByte{0b00000010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010110}, ChannelByte{0b00010010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010110}, ChannelByte{0b00010010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10010111}, ChannelByte{0b00100010000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11010111}, ChannelByte{0b00100010010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011000}, ChannelByte{0b01001000000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11011000}, ChannelByte{0b01001000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011001}, ChannelByte{0b10000010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b11011001}, ChannelByte{0b10000000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011010}, ChannelByte{0b10010000000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11011010}, ChannelByte{0b10010000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011011}, ChannelByte{0b10001000000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11011011}, ChannelByte{0b10001000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011100}, ChannelByte{0b01000010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b11011100}, ChannelByte{0b01000000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011101}, ChannelByte{0b00001000000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11011101}, ChannelByte{0b00001000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011110}, ChannelByte{0b00010000000001}},
            std::pair<Byte, ChannelByte>{Byte{0b11011110}, ChannelByte{0b00010000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10011111}, ChannelByte{0b00100010010000}},
            std::pair<Byte, ChannelByte>{Byte{0b11011111}, ChannelByte{0b00100000010001}},
            std::pair<Byte, ChannelByte>{Byte{0b10100000}, ChannelByte{0b00001000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100001}, ChannelByte{0b00000100000010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100010}, ChannelByte{0b01000100010000}},
            std::pair<Byte, ChannelByte>{Byte{0b11100010}, ChannelByte{0b10000100010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100011}, ChannelByte{0b00000100100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100011}, ChannelByte{0b00100100000010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100100}, ChannelByte{0b01000100001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100100}, ChannelByte{0b01000100010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100101}, ChannelByte{0b00000100001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100101}, ChannelByte{0b00000100010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100110}, ChannelByte{0b01000000100001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100110}, ChannelByte{0b01000000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b10100111}, ChannelByte{0b00100100001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11100111}, ChannelByte{0b00100100010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10101000}, ChannelByte{0b01001001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101000}, ChannelByte{0b10000100000010}},
            std::pair<Byte, ChannelByte>{Byte{0b10101001}, ChannelByte{0b10000001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101001}, ChannelByte{0b10000100000100}},
            std::pair<Byte, ChannelByte>{Byte{0b10101010}, ChannelByte{0b10010001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101010}, ChannelByte{0b00001001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b10101011}, ChannelByte{0b10001001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101011}, ChannelByte{0b00001001000010}},
            std::pair<Byte, ChannelByte>{Byte{0b10101100}, ChannelByte{0b01000001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101100}, ChannelByte{0b01000100000100}},
            std::pair<Byte, ChannelByte>{Byte{0b10101101}, ChannelByte{0b00000001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101101}, ChannelByte{0b00000100000100}},
            std::pair<Byte, ChannelByte>{Byte{0b10101110}, ChannelByte{0b00010001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101110}, ChannelByte{0b00010000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b10101111}, ChannelByte{0b00100001001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11101111}, ChannelByte{0b00100100000100}},
            std::pair<Byte, ChannelByte>{Byte{0b10110000}, ChannelByte{0b00000100100000}},
            std::pair<Byte, ChannelByte>{Byte{0b11110000}, ChannelByte{0b00000100100010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110001}, ChannelByte{0b10000010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110001}, ChannelByte{0b10000010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110010}, ChannelByte{0b10010010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110010}, ChannelByte{0b10010010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110011}, ChannelByte{0b00100100010000}},
            std::pair<Byte, ChannelByte>{Byte{0b11110011}, ChannelByte{0b00001000100010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110100}, ChannelByte{0b01000010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110100}, ChannelByte{0b01000010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110101}, ChannelByte{0b00000010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110101}, ChannelByte{0b00000010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110110}, ChannelByte{0b00010010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110110}, ChannelByte{0b00010010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10110111}, ChannelByte{0b00100010001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11110111}, ChannelByte{0b00100010010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111000}, ChannelByte{0b01001000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111000}, ChannelByte{0b01001000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111001}, ChannelByte{0b10000000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111001}, ChannelByte{0b10000000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111010}, ChannelByte{0b10010000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111010}, ChannelByte{0b10010000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111011}, ChannelByte{0b10001000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111011}, ChannelByte{0b10001000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111100}, ChannelByte{0b01000000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111100}, ChannelByte{0b01000000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111101}, ChannelByte{0b00001000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111101}, ChannelByte{0b00001000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111110}, ChannelByte{0b00010000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111110}, ChannelByte{0b00010000010010}},
            std::pair<Byte, ChannelByte>{Byte{0b10111111}, ChannelByte{0b00100000001001}},
            std::pair<Byte, ChannelByte>{Byte{0b11111111}, ChannelByte{0b00100000010010}}
            /* END AUTO-GENERATED CODE */
        );

        WHEN("The EFM encoder is called with the 8-bit byte as an argument") {
            Byte input = valid_efm_code_pair.first;
            ChannelByte expected_output = valid_efm_code_pair.second;
            ChannelByte output = eight_to_fourteen::encode(input);
            THEN("The EFM encoder should return the corresponding 14-bit EFM codeword") {
                REQUIRE(output == expected_output);
            }
        }

        WHEN("The EFM decoder is called with the 14-bit EFM codeword as an argument") {
            ChannelByte input = valid_efm_code_pair.second;
            Byte expected_output = valid_efm_code_pair.first;
            Byte output = eight_to_fourteen::decode(input);
            THEN("The EFM decoder should return the corresponding 8-bit byte") {
                REQUIRE(output == expected_output);
            }
        }
    }
}

SCENARIO("14-bit or 16-bit values which are not valid EFM codewords are rejected by the EFM decoder") {
    GIVEN("A 14-bit value that is not a valid EFM codeword") {
        // table of invalid 14-bit values
        ChannelByte invalid_efm_value = GENERATE(
            as<ChannelByte>{},
            0b01010101010101,
            0b10101010101010,
            0b00000000000000,
            0b11111111111111,
            0b11100010010010,
            0b00100100010101,
            0b10100100100000
        );
        WHEN("The EFM decoder is called with the 14-bit value as an argument") {
            THEN("An exception should be thrown") {
                // TODO: Change to REQUIRE_THROWS_AS() when exception is created
                REQUIRE_THROWS_AS(eight_to_fourteen::decode(invalid_efm_value), InvalidEFMCodewordException);
            }
        }
    }

    GIVEN("A 16-bit value with at least one of its highest two bits set") {
        // a list of ALL of the 16-bit values with either of 2 MSB set
        ChannelByte invalid_efm_value = GENERATE(
            range(
                ChannelByte{0b0100000000000000},
                ChannelByte{0b1100000000000000 + 1} // range() is exclusive on the upper bound
            )
        );
        WHEN("The EFM decoder is called with the 16-bit value as an argument") {
            // TODO: add calling and result/exception capture
            THEN("An exception should be thrown") {
                // TODO: Change to REQUIRE_THROWS_AS() when exception is created
                REQUIRE_THROWS_AS(eight_to_fourteen::decode(invalid_efm_value), InvalidEFMCodewordException);
            }
        }
    }
}
